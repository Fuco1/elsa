* Narrowing (type guards)

The general type narrowing analysis works as follows:

1. During analysis of a function call, determine if the function
   narrows the type of any variable passed in as an argument
2. Set this type on the function call form as =narrow-types=
3. If later this form is found in a condition (=if=, =cond= etc.), we can
   use the =narrow-types= to narrow the type of the variable /in the
   branch which evaluates when condition is true/.  For the false
   branch, we can use the diff type (anything except the narrowed
   type).

Narrowing can be set on a function statically by using a type
predicate (guard) on the return type.  Only unary functions returning
a boolean can be type predicates.  To mark a function as type
predicate, use the return type =(is TYPE)=, for example:

#+begin_src elisp
(put 'stringp 'elsa-type (elsa-make-type (function (mixed) (is string))))
#+end_src

Narrowing can also be set dynamically during analysis by setting the
form's =narrow-types= to a list of =elsa-variable= items (see step 2).
